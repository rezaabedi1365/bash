#!/bin/sh
# ESET PROTECT
#
# Copyright (c) 1992-2023 ESET, spol. s r.o. - All rights reserved.

if [ "`id -u`" != "0" ];then
   echo "This script must be run as root" 1>&2
   exit 1
fi

init_stty_config_backup=`stty -g`
restore_terminal_configuration() {
    set +e
    stty $init_stty_config_backup
}

arch=$(uname -m)
if ! $(echo "$arch" | grep -E "^(x86_64|amd64)$" > /dev/null 2>&1)
then
   echo "Installing x86_64 package on $arch architecture is not supported" 1>&2
   exit 1
fi

# clear environment variable UPSTART_SESSION -> otherwise initctl wont work as expected
unset UPSTART_SESSION

#############
# VARIABLES #
#############

default_locale="en_US"
arg_locale="$default_locale"

installed=
upgrade=
arg_installed_version=
arg_current_version="10.1.2272.0"
version_status=
script_name=`basename $0`

product_name="Agent"

service_user=root
service_group=root

input_arguments=
interactive=TRUE
skip_license=FALSE
cert_auto_confirm=FALSE
installdir="/opt/eset/RemoteAdministrator/Agent"   # default: /opt/eset/RemoteAdministrator/Agent/

program_bin_dir="/opt/eset/RemoteAdministrator/Agent"
program_config_dir="/etc/opt/eset/RemoteAdministrator/Agent"
program_data_dir="/var/opt/eset/RemoteAdministrator/Agent"
program_logs_dir="/var/log/eset/RemoteAdministrator/Agent"
program_libs_dir="/opt/eset/RemoteAdministrator/Agent"

setup_dir="/opt/eset/RemoteAdministrator/Agent/setup"
setup_db_connectors_dir="/opt/eset/RemoteAdministrator/Agent/setup"

systemd_service="eraagent.service"
upstart_service="eraagent.conf"

modules_dir="${program_data_dir}/Modules/"

pkicache_dir="${program_data_dir}/pki.eset.com/"

db_path="${program_data_dir}/data.db"
# value of these database variables will be set after parsing arguments, because they are extracted in 'installdir' path (which can be set through command-line)
db_status=
db_type=SQLite
db_upgrade=
db_scripts_dir=
db_connectors_dir=

config_file="${program_config_dir}/config.cfg"
installer_log_filename="EraAgentInstaller.log"
installer_log=/var/log/eset/RemoteAdministrator/                         # can be passed as parameter (default is: /var/log/eset/RemoteAdministrator/${installer_log_filename})
installer_log_file=
default_installer_log="${installer_log}${installer_log_filename}"
service_name="eraagent"

# Custom action properties (but not script arguments)
arg_connection_chosen="host"
cert_paths_provided=
arg_cert_subject=
arg_cert_issuer=
arg_cert_hash=
arg_cert_password_is_base64=no
arg_hostname_to_check=


is_providing_cert=false
is_providing_cert_auth=false

################################
# ARGUMENTS AND DEFAULT VALUES #
################################

arg_export_fingerprint=

# certificates
arg_cert_path=
arg_cert_content=
arg_cert_password=
arg_cert_auth_path=
arg_cert_auth_content=

# connection
arg_hostname=
arg_port="2222"
arg_webconsole_hostname=
arg_webconsole_user="Administrator"
arg_webconsole_password=
arg_webconsole_port="2223"
arg_webconsole_use_domain=

arg_computer_group_choice="DEFAULT"
arg_computer_added_uuid=

arg_log_sequence_id=

arg_replication_interval=
arg_initial_static_group=

arg_custom_policy=

arg_create_ca=0
arg_ca_password=

arg_use_proxy=0
arg_proxy_http_hostname=
arg_proxy_http_port="3128"
arg_proxy_http_username=
arg_proxy_http_password=

arg_enable_telemetry=

arg_keep_stored_policies="1"

#############
# FUNCTIONS #
#############


# Log message
log()
{
  local adate
  date="$(date +%Y-%m-%d\ %H:%M:%S)"
  echo "${date} Information: Installer: $@" >> ${installer_log}
}


log_echo()
{  
  log "$@"
  echo "$@"
}


log_uninstall()
{
  local adate
  adate="$(date +%Y-%m-%d\ %H:%M:%S)"
  echo "$@"
  if [ -d "/tmp/" ]; then
    echo "${adate} Information: Installer: $@" >> /tmp/${installer_log_filename}
  fi
}

# Display usage
print_usage()
{
  cat <<EOF
Usage: $(basename $0) [options]

Options:
  -h, --help                                   [optional] print this help message
  -v, --version                                [optional] print product version
  --uninstall                                  [optional] uninstall product
  --skip-license                               [optional] skip license (for silent non-interactive installation)
  --create-ca                                  [optional] if there isn't viable Certification Authority on the server, it will be created (server assisted installation only)
  --ca-password                                [optional,password] Certification Authority password for getting a certificate from server (server assisted installation only)
  --cert-auto-confirm                          [optional] accept certificate generated by server (server assisted installation only)
  --hostname=                                  server hostname for connecting to the server (hostname, IPv4, IPv6 or service record)
  --port=                                      server port for connecting (not needed if service record was provided), default is '2222'
  --webconsole-hostname=                       hostname used by webconsole to connect to the server (if left empty, value will be copied from 'hostname')
  --webconsole-use-domain                      use this parameter when you are using username with domain for connecting through the webconsole
  --webconsole-port=                           port used by webconsole to connect to the server (default is '2223')
  --webconsole-user=                           username used by webconsole to connect to the server (default is 'Administrator')
  --webconsole-password=                       [password] password used by webconsole to connect to the server
  --cert-path=                                 [optional] path to peer certificate file
  --cert-password=                             [optional,password] password for peer certificate
  --cert-auth-path=                            [optional] certification authority file
  --custom-policy=                             [optional] custom configuration policy for Agent
  --proxy-hostname                             [optional] http proxy hostname for connecting to the server
  --proxy-port                                 [optional] http proxy port for connecting to the server
  --proxy-user                                 [optional] username for http proxy
  --proxy-password                             [optional,password] password for http proxy
  --enable-imp-program                         [optional] turns on Product improvement program
  --disable-imp-program                        [optional] turns off Product improvement program

Connection to the ESET Management Center Server must be provided:
hostname, port (port is not needed if service record was provided, default is '2222')

Provide these connection information for server-assisted installation:
webconsole-port, webconsole-user, webconsole-password

Provide certificate information for offline installation:
cert-path, cert-password

Password type parameters (marked with "[password]") can be provided as environment variable, file, read from stdin or provided as plain text, i.e.:
    --password=env:SECRET_PASSWORD where SECRET_PASSWORD is environment variable with password
    --password=file:/opt/secret where first line of regular file /opt/secret contains password
    --password=stdin instructs installer to read password from standard input
    --password="pass:PASSWORD" is equal to --password="PASSWORD" and is mandatory in case actual password is "stdin" or string starting with "env:", "file:" or "pass:"

EOF
}


# Display version
print_version()
{
  echo ""
  echo "ESET Management Agent Installer (version: 10.1.2272.0), Copyright آ© 1992-2023 ESET, spol. s r.o. - All rights reserved."
  echo ""
}

remove_dir_if_empty_cleanup()
{
  if [ -d $1 ];then
    if [ "x$1" = "x`find $1 -type d -empty`" ];then
      log "Removing empty directory $1"; rmdir $1
    fi
  fi
}

action_clean_setup_directory()
{
  log_echo "Cleaning up setup directories"
  if [ ! -f ${config_file} ]; then
    rm -rf ${installdir}
  fi
  remove_dir_if_empty_cleanup "${program_bin_dir}"
  remove_dir_if_empty_cleanup "${program_config_dir}"
  remove_dir_if_empty_cleanup "${program_data_dir}"
  remove_dir_if_empty_cleanup "${program_logs_dir}"
  remove_dir_if_empty_cleanup `dirname $program_bin_dir`
  remove_dir_if_empty_cleanup `dirname $program_config_dir`
  remove_dir_if_empty_cleanup `dirname $program_data_dir`
  remove_dir_if_empty_cleanup `dirname $program_logs_dir`
  remove_dir_if_empty_cleanup "/var/opt/eset"
  remove_dir_if_empty_cleanup "/var/log/eset"
  remove_dir_if_empty_cleanup "/etc/opt/eset"
  remove_dir_if_empty_cleanup "/opt/eset"
}

# Error exit function
# First parameter is exit code
# Second parameter is log message
error_exit()
{
  if [ "2" -eq "$1" ]
  then
    log_echo "$2: Current locale settings are invalid" 1>&2
  else
    log_echo "${2:-"Unknown Error"}" 1>&2
  fi
  action_clean_setup_directory
  exit $1
}


# process input parameters as defined here: https://www.openssl.org/docs/apps/openssl.html#PASS_PHRASE_ARGUMENTS
# arg1 = name of shell variable to be processed
process_password_var()
{
  varname="$1"
  eval 'input="${'$varname'}"'
  output=""

  case "$input" in
    pass:*)
      output=`/bin/echo -E $input | cut -c 6-`;;
    env:*)
      envname=`echo $input | cut -c 5-`
      eval 'output="${'$envname'}"';;
    file:*)
      filename=`echo $input | cut -c 6-`
      read -r output < "$filename";;
    stdin)
      trap "restore_terminal_configuration" HUP INT QUIT TERM EXIT
      echo -n "Password [$2]:"
      stty_bak=`stty -g`
      stty -echo
      read output
      stty $stty_bak
      trap "" HUP INT QUIT TERM EXIT
      echo "";;
    *)
      output="$input";;
  esac

  eval "$varname=\$output"
}


remove_dir()
{
  if [ -d $1 ];then
    log_uninstall "Removing directory $1"; rm -rf $1
  fi
}


remove_dir_if_empty()
{
  if [ -d $1 ];then
    if [ "x$1" = "x`find $1 -type d -empty`" ];then
      log_uninstall "Removing empty directory $1"; rmdir $1
    fi
  fi
}

# Uninstall function
uninstall_without_exit()
{
  # remove previous install log
  if test -f $default_installer_log; then
    log_uninstall "Removing  $default_installer_log"
    rm $default_installer_log
  fi
  
  # unregister service startup scripts
  # remove system links to script
  if command -v systemctl > /dev/null 2>&1; then
    if systemctl is-active $systemd_service > /dev/null 2>&1 ; then
      log_uninstall "Stopping running instance of $systemd_service"
      systemctl stop $systemd_service
    fi
    if systemctl is-enabled $systemd_service > /dev/null ; then
      log_uninstall "Disabling $systemd_service"
      systemctl disable $systemd_service
    fi
    if test -f /etc/systemd/system/$systemd_service; then
      log_uninstall "Removing service file /etc/systemd/system/$systemd_service"
      rm /etc/systemd/system/$systemd_service
    fi
  elif command -v initctl > /dev/null 2>&1 && [ -d /etc/init/ ]; then
    if initctl status $service_name 2> /dev/null | grep running > /dev/null 2>&1; then
      initctl stop $service_name
    fi
    if test -f /etc/init/$upstart_service; then
      log_uninstall "Removing service file /etc/init/$upstart_service"
      rm /etc/init/$upstart_service
    fi
  elif test -f /etc/init.d/$service_name; then
    log_uninstall "Stopping running instance of $service_name"
    /etc/init.d/$service_name stop

    log_uninstall "Unregistering service $service_name"
    if command -v update-rc.d > /dev/null 2>&1; then
      update-rc.d -f $service_name remove
    else
      chkconfig $service_name off
      chkconfig --del $service_name
    fi

    log_uninstall "Removing service script /etc/init.d/$service_name"
    rm /etc/init.d/$service_name
  fi

  # remove directories
  remove_dir $program_bin_dir
  remove_dir $program_config_dir
  remove_dir $program_data_dir
  remove_dir $program_logs_dir
  remove_dir $program_libs_dir
  remove_dir $setup_dir
  remove_dir $setup_db_connectors_dir

  # remove parent dirs if empty
  remove_dir_if_empty `dirname $program_bin_dir`
  remove_dir_if_empty `dirname $program_config_dir`
  remove_dir_if_empty `dirname $program_data_dir`
  remove_dir_if_empty `dirname $program_logs_dir`
  remove_dir_if_empty "/var/opt/eset"
  remove_dir_if_empty "/var/log/eset"
  remove_dir_if_empty "/etc/opt/eset"
  remove_dir_if_empty "/opt/eset"
}

uninstall()
{
  uninstall_without_exit

  echo "Product uninstalled."

  exit 0
}


###################
# PARSE ARGUMENTS #
###################

do_uninstall=false

while test $# != 0
do
  case "$1" in
    -h|--help)
      print_usage
      exit 0
      ;;
    -v|--version)
      print_version
      exit 0
      ;;
    --uninstall)
      do_uninstall=:
      ;;
    --skip-license)
      skip_license=TRUE
      interactive=FALSE
      ;;
    --cert-auto-confirm)
      cert_auto_confirm=TRUE
      ;;
    --webconsole-use-domain)
      arg_webconsole_use_domain=1
      ;;
    --create-ca)
      arg_create_ca=1
      ;;
    --ca-password)
      shift
      arg_ca_password="$1"
      process_password_var "arg_ca_password" "--ca-password"
      ;;
    --ca-password=*)
      arg_ca_password=$(/bin/echo -E "$1" | sed 's/^--ca-password=//')
      process_password_var "arg_ca_password" "--ca-password"
      ;;
    --product-guid)
      shift
      arg_product_guid="$1"
      ;;
    --product-guid=*)
      arg_product_guid=$(/bin/echo -E "$1" | sed 's/^--product-guid=//')
      ;;
    --hostname)
      shift
      arg_user_hostname="$1"
      ;;
    --hostname=*)
      arg_user_hostname=$(/bin/echo -E "$1" | sed 's/^--hostname=//')
      ;;
    --port)
      shift
      arg_user_port="$1"
      ;;
    --port=*)
      arg_user_port=$(/bin/echo -E "$1" | sed 's/^--port=//')
      ;;
    --cert-path)
      shift
      arg_user_cert_path="$1"
      ;;
    --cert-path=*)
      arg_user_cert_path=$(/bin/echo -E "$1" | sed 's/^--cert-path=//')
      ;;
    --cert-content)
      shift
      arg_user_cert_content="$1"
      ;;
    --cert-content=*)
      arg_user_cert_content=$(/bin/echo -E "$1" | sed 's/^--cert-content=//')
      ;;
    --webconsole-hostname)
      shift
      arg_webconsole_hostname="$1"
      ;;
    --webconsole-hostname=*)
      arg_webconsole_hostname=$(/bin/echo -E "$1" | sed 's/^--webconsole-hostname=//')
      ;;
    --webconsole-port)
      shift
      arg_webconsole_port="$1"
      ;;
    --webconsole-port=*)
      arg_webconsole_port=$(/bin/echo -E "$1" | sed 's/^--webconsole-port=//')
      ;;
    --webconsole-user)
      shift
      arg_webconsole_user="$1"
      ;;
    --webconsole-user=*)
      arg_webconsole_user=$(/bin/echo -E "$1" | sed 's/^--webconsole-user=//')
      ;;
    --webconsole-password)
      shift
      arg_webconsole_password="$1"
      process_password_var "arg_webconsole_password" "--webconsole-password"
      ;;
    --webconsole-password=*)
      arg_webconsole_password=$(/bin/echo -E "$1" | sed 's/^--webconsole-password=//')
      process_password_var "arg_webconsole_password" "--webconsole-password"
      ;;
    --cert-password)
      shift
      arg_user_cert_password="$1"
      process_password_var "arg_user_cert_password" "--cert-password"
      ;;
    --cert-password=*)
      arg_user_cert_password=$(/bin/echo -E "$1" | sed 's/^--cert-password=//')
      process_password_var "arg_user_cert_password" "--cert-password"
      ;;
    --cert-password-is-base64)
      arg_cert_password_is_base64=yes
      ;;
    --cert-auth-path)
      shift
      arg_user_cert_auth_path="$1"
      ;;
    --cert-auth-path=*)
      arg_user_cert_auth_path=$(/bin/echo -E "$1" | sed 's/^--cert-auth-path=//')
      ;;
    --cert-auth-content)
      shift
      arg_user_cert_auth_content="$1"
      ;;
    --cert-auth-content=*)
      arg_user_cert_auth_content=$(/bin/echo -E "$1" | sed 's/^--cert-auth-content=//')
      ;;
    --log-sequence-id)
      shift
      arg_log_sequence_id="$1"
      ;;
    --log-sequence-id=*)
      arg_log_sequence_id=$(/bin/echo -E "$1" | sed 's/^--log-sequence-id=//')
      ;;
    --replication-interval)
      shift
      arg_replication_interval="$1"
      ;;
    --replication-interval=*)
      arg_replication_interval=$(/bin/echo -E "$1" | sed 's/^--replication-interval=//')
      ;;
    --initial-static-group)
      shift
      arg_initial_static_group="$1"
      ;;
    --initial-static-group=*)
      arg_initial_static_group=$(/bin/echo -E "$1" | sed 's/^--initial-static-group=//')
      ;;
    --custom-policy)
      shift
      arg_custom_policy="$1"
      ;;
    --custom-policy=*)
      arg_custom_policy=$(/bin/echo -E "$1" | sed 's/^--custom-policy=//')
      ;;
    --export-fingerprint=*)
      # Server certificate's fingerprint will be exported.
      arg_export_fingerprint=$(/bin/echo -E "$1" | sed 's/^--export-fingerprint=//')
      ;;
    --proxy-hostname)
      shift
      arg_use_proxy=1
      arg_proxy_http_hostname="$1"
      ;;
    --proxy-hostname=*)
      arg_use_proxy=1
      arg_proxy_http_hostname=$(/bin/echo -E "$1" | sed 's/^--proxy-hostname=//')
      ;;
    --proxy-port)
      shift
      arg_use_proxy=1
      arg_proxy_http_port="$1"
      ;;
    --proxy-port=*)
      arg_use_proxy=1
      arg_proxy_http_port=$(/bin/echo -E "$1" | sed 's/^--proxy-port=//')
      ;;
    --proxy-user)
      shift
      arg_use_proxy=1
      arg_proxy_http_username="$1"
      ;;
    --proxy-user=*)
      arg_use_proxy=1
      arg_proxy_http_username=$(/bin/echo -E "$1" | sed 's/^--proxy-user=//')
      ;;
    --proxy-password)
      shift
      arg_use_proxy=1
      arg_proxy_http_password="$1"
      process_password_var "arg_proxy_http_password" "--proxy-password"
      ;;
    --proxy-password=*)
      arg_use_proxy=1
      arg_proxy_http_password=$(/bin/echo -E "$1" | sed 's/^--proxy-password=//')
      process_password_var "arg_proxy_http_password" "--proxy-password"
      ;;
    --disable-imp-program)
      arg_enable_telemetry=0
      ;;
    --enable-imp-program)
      arg_enable_telemetry=1
      ;;
    *)
      echo "Unknown option \"$1\". Run '$script_name --help' for usage information." >&2
      exit 1
      ;;
  esac
  shift
done

if $do_uninstall
then
    uninstall
fi

##################
# INITIALIZATION #
##################

# Initialize log file
if [ "x${installer_log}" != "x" ]; then
  mkdir -p ${installer_log}
  installer_log=${installer_log}${installer_log_filename}
else
  mkdir -p /var/log/eset/
  installer_log=/var/log/eset/${installer_log_filename}
fi

if [ -f ${installer_log} ]; then
  rm -rf ${installer_log}
fi

touch ${installer_log}
log "*******************************************"
log_echo "Initialized log file: ${installer_log}"


#################
# PRINT VERSION #
#################

print_version


##########################
# ARGUMENTS VERIFICATION #
##########################

if [ "x${arg_user_hostname}" != "x" -o "x${arg_user_port}" != "x" ]; then
    arg_keep_stored_policies="0"
fi
if [ "x${arg_use_proxy}" = "x1" -o  "x${arg_custom_policy}" != "x" ]; then
    arg_keep_stored_policies="0"
fi
if [ "x${arg_webconsole_hostname}" != "x" -o  "x${arg_webconsole_user}" != "xAdministrator" -o\
     "x${arg_webconsole_password}" != "x" -o "x${arg_webconsole_port}" != "x2223" ]; then
    arg_keep_stored_policies="0"
fi
if [ "x${arg_user_cert_path}" != "x" -o  "x${arg_user_cert_content}" != "x" -o  "x${arg_user_cert_password}" != "x" ]; then
    arg_keep_stored_policies="0"
fi
if [ "x${arg_user_cert_auth_path}" != "x" -o  "x${arg_user_cert_auth_content}" != "x" ]; then
    arg_keep_stored_policies="0"
fi

if [ "x${arg_product_guid}" != "x" ];then
  # UUID v4 check
  echo "$arg_product_guid" | grep -i -E '[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}' 2> /dev/null > /dev/null
  if [ 0 != $? ];then
    log_echo "Error: --product-guid is not in UUID format"
    exit 1
  fi
  GUID=${arg_product_guid}
fi

if ! test -x "/opt/eset/RemoteAdministrator/Agent/ERAAgent"
then

    if [ "x${arg_user_hostname}" = "x" ]; then
      log_echo "Error: --hostname was not provided."
      print_usage
      exit 2
    fi    
    if [ "x${arg_user_port}" = "x" ]; then
      log_echo "Error: --port was not provided."
      print_usage
      exit 2
    fi
    
    
    if [ "x${arg_webconsole_user}" = "x" -o "x${arg_webconsole_password}" = "x" -o "x${arg_webconsole_port}" = "x" ]; then
       
       if [ "x${arg_user_cert_path}" = "x" -a "x${arg_user_cert_content}" = "x" ]; then
          log_echo "Error: Neither the server connection nor the certificate was provided."
          print_usage
          exit 2
       fi
    fi

fi

if [ "x${arg_use_proxy}" = "x1" ]; then
  if [ "x${arg_proxy_http_hostname}" = "x" ]; then
    log_echo "Error: If you want to use proxy, input --proxy-hostname, otherwise delete all proxy arguments"
    print_usage
    exit 2
  fi

  if [ "x${arg_proxy_http_password}" != "x" -a "x${arg_proxy_http_username}" = "x" ]; then
    log_echo "Error: Use --proxy-user or remove --proxy-password"
    print_usage
    exit 2
  fi
fi
###########
# LICENSE #
###########

if [ "x${interactive}x" = "xTRUEx" ]
then
  echo
  echo "If you want to stop extracting, please press <ctrl-C>."

  if [ "x${skip_license}x" != "xTRUEx" ]
  then
    major_version_number=`echo $arg_current_version | cut -d'.' -f 1`
    minor_version_number=`echo $arg_current_version | cut -d'.' -f 2`
    more << '____license_placeholder____'
Effective as of October 19, 2021.
IMPORTANT: Please read the terms and conditions of product application set out below carefully prior to download, installation, copy or use. THROUGH DOWNLOADING, INSTALLING, COPYING OR USING THE SOFTWARE YOU ARE EXPRESSING YOUR CONSENT TO THESE TERMS AND CONDITIONS AND YOU ACKNOWLEDGE .
End User License Agreement
Under the terms of this End User License Agreement ("Agreement") executed by and between ESET, spol. s r. o., having its registered office at Einsteinova 24, 85101 Bratislava, Slovak Republic, registered in the Commercial Register administered by Bratislava I District Court, Section Sro, Entry No 3586/B, Business Registration Number: 31333532 ("ESET" or "Provider") and you, a physical person or legal entity ("You" or "End User"), You are entitled to use the Software defined in Article 1 of this Agreement. The Software defined in Article 1 of this Agreement can be stored on a data carrier, sent via electronic mail, downloaded from the Internet, downloaded from the Provider's servers or obtained from other sources, subject to the terms and conditions specified below.
THIS IS AN AGREEMENT ON END USER RIGHTS AND NOT AN AGREEMENT FOR SALE. The Provider continues to own the copy of the Software and the physical media contained in the sales package and any other copies that the End User is authorized to make pursuant to this Agreement.
By clicking on "I Accept" or "I Acceptâ€¦" while installing, downloading, copying or using the Software, You agree to the terms and conditions of this Agreement and acknowledge the Privacy Policy. If You do not agree to all of the terms and conditions of this Agreement and/or Privacy Policy, immediately click on the canceling option, cancel the installation or download, or destroy or return the Software, installation media, accompanying documentation and sales receipt to the Provider or the outlet from which You acquired the Software.
YOU AGREE THAT YOUR USE OF THE SOFTWARE ACKNOWLEDGES THAT YOU HAVE READ THIS AGREEMENT, UNDERSTAND IT AND AGREE TO BE BOUND BY ITS TERMS AND CONDITIONS.
1. Software. As used in this Agreement the term "Software" means: (i) computer program accompanied by this Agreement and all components thereof; (ii) all the contents of the disks, CD-ROMs, DVDs, e-mails and any attachments, or other media with which this Agreement is provided, including the object code form of the Software supplied on a data carrier, via electronic mail or downloaded via the Internet; (iii) any related explanatory written materials and any other possible documentation related to the Software, above all any description of the Software, its specifications, any description of the Software properties or operation, any description of the operating environment in which the Software is used, instructions for use or installation of the Software or any description of how to use the Software ("Documentation"); (iv) copies of the Software, patches for possible errors in the Software, additions to the Software, extensions to the Software, modified versions of the Software and updates of Software components, if any, licensed to You by the Provider pursuant to Article 3 of this Agreement. The Software shall be provided exclusively in the form of executable object code.
2. Installation, Computer and a License key. Software supplied on a data carrier, sent via electronic mail, downloaded from the Internet, downloaded from the Provider's servers or obtained from other sources requires installation. You must install the Software on a correctly configured Computer, complying at least with requirements set out in theآ Documentation. The installation methodology is described in the Documentation. No computer programs or hardware which could have an adverse effect on the Software may be installed on the Computer on which You install the Software. Computer means hardware, including but not limited to personal computers, laptops, workstations, palmtop computers, smartphones, hand-held electronic devices, or other electronic devices for which the Software is designed, on which it will be installed and/or used. License key means the unique sequence of symbols, letters, numbers or special signs provided to the End User in order to allow the legal use of the Software, its specific version or extension of the term of the License in compliance with this Agreement.
3. License. Subject to the condition that You have agreed to the terms of this Agreement and You comply with all the terms and conditions stipulated herein, the Provider shall grant You the following rights ("License"):
a) Installation and use. You shall have the non-exclusive, non-transferable right to install the Software on the hard disk of a Computer or other permanent medium for data storage, installation and storage of the Software in the memory of a computer system and to implement, store and display the Software.
b) Stipulation of the number of licenses. The right to use the Software shall be bound by the number of End Users. One End User shall be taken to refer to the following: (i) installation of the Software on one Computer; or (ii) if the extent of a license is bound to the number of mailboxes, then one End User shall be taken to refer to a Computer user who accepts electronic mail via a Mail User Agent ("MUA"). If MUA accepts electronic mail and subsequently distributes it automatically to several users, then the number of End Users shall be determined according to the actual number of users for whom the electronic mail is distributed. If a mail server performs the function of a mail gate, the number of End Users shall equal the number of mail server users for which the said gate provides services. If an unspecified number of electronic mail addresses are directed to and accepted by one user (e.g., through aliases) and messages are not automatically distributed by the client to a larger number of users, a License for one computer shall be required. You must not use the same License at the same time on more than one Computer. The End User is entitled to enter the License key to the Software only to the extent to which the End User has the right to use the Software in accordance with the limitation arising from the number of Licenses granted by Provider. The License key is deemed confidential, You must not share the License with third parties or allow third parties to use the License key unless permitted by this Agreement or Provider. If your License key is compromised, notify Provider immediately.
c) Home/Business Edition. A Home Edition version of the Software shall be used exclusively in private and/or non-commercial environments for home and family use only. A Business Edition version of the Software must be obtained for use in a commercial environment as well as to use the Software on mail servers, mail relays, mail gateways, or Internet gateways.
d) Term of the License. Your right to use the Software shall be time-limited.
e) OEM Software. Software classified as "OEM" shall be limited to the Computer You obtained it with. It cannot be transferred to a different Computer.
f) NFR, TRIAL Software. Software classified as "Not-for-resale", NFR or TRIAL cannot be assigned for payment and must only be used for demonstration or testing the Software's features.
g) Termination of the License. The License shall terminate automatically at the end of the period for which granted. If You fail to comply with any of the provisions of this Agreement, the Provider shall be entitled to withdraw from the Agreement, without prejudice to any entitlement or legal remedy open to the Provider in such eventualities. In the event of cancellation of the License, You must immediately delete, destroy or return at your own cost, the Software and all backup copies to ESET or to the outlet from which You obtained the Software. Upon termination of the License, the Provider shall also be entitled to cancel the End User's entitlement to use the functions of the Software, which require connection to the Provider's servers or third-party servers.
4. Functions with data collection and internet connection requirements. To operate correctly, the Software requires connection to the Internet and must connect at regular intervals to the Provider's servers or third-party servers and applicable data collection in compliance with Privacy Policy. Connection to the Internet and applicable data collection is necessary for functioning of the Software and for updating and upgrading the Software. The Provider shall be entitled to issue updates or upgrades to the Software ("Updates"), but shall not be obliged to provide Updates. This function is enabled under the Software's standard settings and Updates are therefore installed automatically, unless the End User has disabled the automatic installation of Updates. For provisioning of Updates, License authenticity verification is required, including information about Computer and/or the platform on which the Software is installed in compliance with Privacy Policy.
Provision of any Updates may be subject to End of Life Policy ("EOL Policy"), which is available on https://go.eset.com/eol_business. No Updates will be provided after the Software or any of its features reaches the End of Life date as defined in the EOL Policy.
For the purpose of this Agreement, it is necessary to collect, process and store data enabling the Provider to identify You in compliance with Privacy Policy. You hereby acknowledge that the Provider checks using its own means whether You are using the Software in accordance with the provisions of this Agreement. You hereby acknowledge that for the purpose of this Agreement it is necessary for your data to be transferred, during communication between the Software and the Provider's computer systems or those of its business partners as part of Providerâ€™s distribution and support network to ensure functionality of Software and authorization to use the Software and to protection of the Providerâ€™s rights.
Following conclusion of this Agreement, the Provider or any of its business partners as part of Providerâ€™s distribution and support network shall be entitled to transfer, process and store essential data identifying You for billing purposes, performance of this Agreement and transmitting notifications on your Computer.
Details about privacy, personal data protection and Your rights as a data subject can be found in Privacy Policy which is available on Providerâ€™s website and accessible directly from the installation process. You can also visit it from Softwareâ€™s help section.
5. Exercising End User rights. You must exercise End User rights in person or via your employees. You are only entitled to use the Software to safeguard your operations and protect those Computers or computers systems for which You have obtained a License.
6. Restrictions to rights. You may not copy, distribute, extract components or make derivative works of the Software. When using the Software, You are required to comply with the following restrictions:
a) You may make one copy of the Software on a permanent storage medium as an archival backup copy, provided your archival back-up copy is not installed or used on any Computer. Any other copies You make of the Software shall constitute a breach of this Agreement.
b) You may not use, modify, translate or reproduce the Software or transfer rights to use the Software or copies of the Software in any manner other than as provided for in this Agreement.
c) You may not sell, sub-license, lease or rent or borrow the Software or use the Software for the provision of commercial services.
d) You may not reverse engineer, reverse compile or disassemble the Software or otherwise attempt to discover the source code of the Software, except to the extent that this restriction is expressly prohibited by law.
e) You agree that You will only use the Software in a manner that complies with all applicable laws in the jurisdiction in which You use the Software, including, but not limited to, applicable restrictions concerning copyright and other intellectual property rights.
f) You agree that You will only use the Software and its functions in a way which does not limit the possibilities of other End Users to access these services. The Provider reserves the right to limit the scope of services provided to individual End Users, to enable use of the services by the highest possible number of End Users. Limiting the scope of services shall also mean complete termination of the possibility to use any of the functions of the Software and deletion of Data and information on the Provider's servers or third-party servers relating to a specific function of the Software.
g) You agree not to exercise any activities involving use the License key, contrary to the terms of this Agreement or leading to provide License key to any person who is not entitled to use the Software, such as the transfer of used or unused License key in any form, as well as the unauthorized reproduction, or distribution of duplicated or generated License keys or using the Software as a result of the use of a License key obtained from the source other than the Provider.
7. Copyright. The Software and all rights, without limitation including proprietary rights and intellectual property rights thereto are owned by ESET and/or its licensors. They are protected by international treaty provisions and by all other applicable national laws of the country in which the Software is being used. The structure, organization and code of the Software are the valuable trade secrets and confidential information of ESET and/or its licensors. You must not copy the Software, except as set forth in Article 6(a). Any copies which You are permitted to make pursuant to this Agreement must contain the same copyright and other proprietary notices that appear on the Software. If You reverse engineer, reverse compile, disassemble or otherwise attempt to discover the source code of the Software, in breach of the provisions of this Agreement, You hereby agree that any information thereby obtained shall automatically andآ irrevocably be deemed to be transferred to and owned by the Provider in full, from the moment such information comes into being, notwithstanding the Provider's rights in relation to breach of this Agreement.
8. Reservation of rights. The Provider hereby reserves all rights to the Software, with the exception of rights expressly granted under the terms of this Agreement to You as the End User of the Software.
9. Multiple language versions, dual media software, multiple copies. In the event that the Software supports multiple platforms or languages, or if You receive multiple copies of the Software, You may only use the Software for the number of computer systems and for the versions for which You obtained a License. You may not sell, rent, lease, sub-license, lend or transfer versions or copies of the Software which You do not use.
10. Commencement and termination of the Agreement. This Agreement shall be effective from the date You agree to the terms of this Agreement. You may terminate this Agreement at any time by permanently uninstalling, destroying and returning, at your own cost, the Software, all backup copies and all related materials provided by the Provider or its business partners. Your right to use Software and any of its features may be subject to EOL Policy. After the Software or any of its features reaches the End of Life date defined in the EOL Policy, your right to use the Software will terminate. Irrespective of the manner of termination of this Agreement, the provisions of Articles 7, 8, 11, 13, 19 and 21 shall continue to apply for an unlimited time.
11. END USER DECLARATIONS. AS THE END USER YOU ACKNOWLEDGE THAT THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, AND TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW. NEITHER THE PROVIDER, ITS LICENSORS OR AFFILIATES, NOR THE COPYRIGHT HOLDERS MAKE ANY REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE OR THAT THE SOFTWARE WILL NOT INFRINGE ANY THIRD-PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS. THERE IS NO WARRANTY BY THE PROVIDER OR BY ANY OTHER PARTY THAT THE FUNCTIONS CONTAINED IN THE SOFTWARE WILL MEET YOUR REQUIREMENTS OR THAT THE OPERATION OF THE SOFTWARE WILL BE UNINTERRUPTED OR ERROR-FREE. YOU ASSUME ALL RESPONSIBILITY AND RISK FOR THE SELECTION OF THE SOFTWARE TO ACHIEVE YOUR INTENDED RESULTS AND FOR THE INSTALLATION, USE AND RESULTS OBTAINED FROM IT.
12. No other obligations. This Agreement creates no obligations on the part of the Provider and its licensors other than as specifically set forth herein.
13. LIMITATION OF LIABILITY. TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, IN NO EVENT SHALL THE PROVIDER, ITS EMPLOYEES OR LICENSORS BE LIABLE FOR ANY LOST PROFITS, REVENUE, SALES, DATA OR COSTS OF PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, PROPERTY DAMAGE, PERSONAL INJURY, INTERRUPTION OF BUSINESS, LOSS OF BUSINESS INFORMATION OR FOR ANY SPECIAL, DIRECT, INDIRECT, INCIDENTAL, ECONOMIC, COVER, PUNITIVE, SPECIAL OR CONSEQUENTIAL DAMAGES, HOWEVER CAUSED AND WHETHER ARISING UNDER CONTRACT, TORT, NEGLIGENCE OR OTHER THEORY OF LIABILITY, ARISING OUT OF THE INSTALLATION, THE USE OF OR INABILITY TO USE THE SOFTWARE, EVEN IF THE PROVIDER OR ITS LICENSORS OR AFFILIATES ARE ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. BECAUSE SOME COUNTRIES AND JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF LIABILITY, BUT MAY ALLOW LIABILITY TO BE LIMITED, IN SUCH CASES, THE LIABILITY OF THE PROVIDER, ITS EMPLOYEES OR LICENSORS OR AFFILIATES SHALL BE LIMITED TO THE SUM THAT YOU PAID FOR THE LICENSE.
14. Nothing contained in this Agreement shall prejudice the statutory rights of any party dealing as a consumer if running contrary thereto.
15. Technical support. ESET or third parties commissioned by ESET shall provide technical support at their own discretion, without any guarantees or declarations. No technical support will be provided after the Software or any of its features reaches the End of Life date defined in the EOL Policy. The End User shall be required to back up all existing data, software and program facilities prior to the provision of technical support. ESET and/or third parties commissioned by ESET cannot accept liability for damage or loss of data, property, software or hardware or loss of profits due to the provision of technical support. ESET and/or third parties commissioned by ESET reserve the right to decide that resolving the problem is beyond the scope of technical support. ESET reserves the right to refuse, suspend or terminate the provision of technical support at its own discretion. License information, Information and other data in compliance with Privacy Policy may be required for the purpose of technical support provision.
16. Transfer of the License. The Software can be transferred from one Computer to another, unless contrary to the terms of the Agreement. If not contrary to the terms of the Agreement, the End User shall only be entitled to permanently transfer the License and all rights ensuing from this Agreement to another End User with the Provider's consent, subject to the condition that (i) the original End User does not retain any copies of the Software; (ii) the transfer of rights must be direct, i.e. from the original End User to the new End User; (iii) the new End User must assume all the rights and obligations incumbent on the original End User under the terms of this Agreement; (iv) the original End User has to provide the new End User with documentation enabling verification of the genuineness of the Software as specified under Article 17.
17. Verification of the genuineness of the Software. The End User may demonstrate entitlement to use the Software in one of the following ways: (i) through a license certificate issued by the Provider or a third party appointed by the Provider; (ii) through a written license agreement, if such an agreement was concluded; (iii) through the submission of an e-mail sent by the Provider containing licensing details (user name and password). License information and End User identification data in compliance with Privacy Policy may be required for the purpose of Software genuineness verification.
18. Licensing for public authorities and the US Government. The Software shall be provided to public authorities, including the United States Government, with the license rights and restrictions described in this Agreement.
19. Trade control compliance.
a) You will not, directly or indirectly, export, re-export, transfer or otherwise make available the Software to any person, or use it in any manner, or be involved in any activity, that could result in ESET or its holding companies, its subsidiaries, and the subsidiaries of any of its holding companies, as well as entities controlled by its holding companies ("Affiliates") being in violation of, or being subject to, negative consequences under trade control laws which include:
i. any laws that control, restrict, or impose licensing requirements on export, re-export or transfer of goods, software, technology, or services, issued or adopted by any government, state or regulatory authority of the United States of America, Singapore, the United Kingdom, the European Union or any of its Member States, or any country in which obligations under the Agreement are to be performed, or in which ESET or any of its Affiliates are incorporated or operate, and
ii. any economic, financial, trade or other, sanction, restriction, embargo, import or export ban, prohibition on transfer of funds or assets or on performing services, or equivalent measure imposed by any government, state or regulatory authority of the United States of America, Singapore, the United Kingdom, the European Union or any of its Member States, or any country in which obligations under the Agreement are to be performed, or in which ESET or any of its Affiliates are incorporated or operate.
(legal acts referred to in points i, and ii. above together as "Trade Control Laws").
b) ESET shall have the right to suspend its obligations under, or terminate, these Terms with immediate effect in the event that:
i. ESET determines that, in its reasonable opinion, the User has breached or is likely to breach provision of Article 19 a) of the Agreement; or
ii. the End User and/or the Software become subject to Trade Control Laws and, as a result, ESET determines that, in its reasonable opinion, the continued performance of its obligations under the Agreement could result in ESET or its Affiliates being in violation of, or being subject to negative consequences under, Trade Control Laws.
c) Nothing in the Agreement is intended, and nothing should be interpreted or construed, to induce or require either party to act or refrain from acting (or to agree to act or refrain from acting) in any manner which is inconsistent with, penalized, or prohibited under any applicable Trade Control Laws.
20. Notices. All notices and returns of the Software andآ Documentation must be delivered to: ESET, spol. sآ r. o., Einsteinova 24, 85101 Bratislava, Slovak Republic, without prejudice to ESETآ´s right to communicate to You any changes to this Agreement, Privacy Policies, EOL Policy and Documentation in accordance with art. 22 of the Agreement. ESET may send You emails, in-app notifications via Software or post the communication on our website. You agree to receive legal communications from ESET in electronic form, including any communications on change in Terms, Special Terms or Privacy Policies, any contract proposal/acceptance or invitations to treat, notices or other legal communications. Such electronic communication shall be deemed as received in writing, unless applicable laws specifically require a different form of communication.
21. Applicable law. This Agreement shall be governed by and construed in accordance with the laws of the Slovak Republic. The End User and the Provider hereby agree that the principles of the conflict of laws and the United Nations Convention on Contracts for the International Sale of Goods shall not apply. You expressly agree that any disputes or claims ensuing from this Agreement with respect to the Provider or any disputes or claims relating to use of the Software shall be settled by Bratislava I District Court and You expressly agree to the said court exercising jurisdiction.
22. General provisions. Should any of the provisions of this Agreement be invalid or unenforceable, this shall not affect the validity of the other provisions of the Agreement, which shall remain valid and enforceable under the conditions stipulated therein. This Agreement has been executed in English. In case any translation of the Agreement is prepared for the convenience or any other purpose or in any case of a discrepancy between language versions of this Agreement, the English version shall prevail.
ESET reserves the right to make changes to the Software as well as to revise terms of this Agreement, its Annexes, Addendums, Privacy Policy, EOL Policy and Documentation or any part thereof at any time by updating the relevant document (i) to reflect changes to the Software or to how ESET does business, (ii) for legal, regulatory or security reasons, or (iii) to prevent abuse or harm. You will be notified about any revision of the Agreement by email, in-app notification or by other electronic means. If You disagree with the proposed changes to the Agreement, You may terminate it in accordance with Art. 10 within 30 days after receiving a notice of the change. Unless You terminate the Agreement within this time limit, the proposed changes will be deemed accepted and become effective towards You as of the date You received a notice of the change.
This is the entire Agreement between the Provider and You relating to the Software and it supersedes any prior representations, discussions, undertakings, communications or advertising relating to the Software.
ADDENDUM TO THE AGREEMENT
Communication and Managing Data. Additional provisions apply to the Communication and Managing Data as follows:
The Software contains a function, which enables transfer of information between Computer and remote management software. Information, which are subject to transfer contains management data such as hardware and software information of managed computer and managing instructions from the remote management software. Other content of data transferred from Computer shall be determined by the settings of software installed on Computer. The content of instructions from management software shall be determined by settings of remote management software.
EULAID: EULA-PRODUCT-AGENT; 3537.0



____license_placeholder____
    echo
    echo "Privacy Policy:"
    echo "https://help.eset.com/getHelp?product=protect_admin&version=${major_version_number}.${minor_version_number}&lang=1033&topic=privacy_policy"
    echo
    echo "Do you accept the license? [y/N]: "
    read line leftover
    case ${line} in
      y* | Y*)
        license_accepted=TRUE;;
      *)
        log_echo "License not accepted. Exiting ..."
        exit 1;;
    esac
  fi
fi


########################
# TELEMETRY #
########################

if [ "x${interactive}x" = "xTRUEx" ]
then
    if [ "x${arg_enable_telemetry}" = "x" ]
    then
        echo
        echo "Product improvement program"
        echo "Participating in product improvement program includes sending crash reports and anonymous telemetry data such as OS version and type, ESET product version and other product-specific information to ESET when enabled."
        echo
        echo "Do you want to participate in the Product improvement program? [Y/n]: "
        read line leftover
        case ${line} in
          n* | N*)
            arg_enable_telemetry=0;;
          *)
            arg_enable_telemetry=1;;
        esac
    fi
fi

########################
# CREATING DIRECTORIES #
########################

log_echo "Creating directories..."

log_echo "Creating 'config' directory path: ${program_config_dir}"
mkdir -p ${program_config_dir}

log_echo "Creating 'data' directory path: ${program_data_dir}"
mkdir -p ${program_data_dir}

log_echo "Creating 'Pki Cache' directory path: ${pkicache_dir}"
mkdir -p ${pkicache_dir}

log_echo "Creating 'logs' directory path: ${program_logs_dir}"
mkdir -p ${program_logs_dir}

log_echo "Creating 'libs' directory path: ${program_libs_dir}"
mkdir -p ${program_libs_dir}

log_echo "Directories created"

##############
# EXTRACTING #
##############

installer_data_dir=$(dirname ${installdir})/AgentInstallerData
rm -rf ${installer_data_dir}
mkdir -p ${installer_data_dir}

log_echo "The archive will be extracted to: ${installer_data_dir}"
log_echo "Extracting, please wait..."

# take the archive arg_portion of this file and pipe it to tar
# the NUMERIC parameter in this command should be one more
# than the number of lines in this header file
# there are tails which don't understand the "-n" argument, e.g. on SunOS
# OTOH there are tails which complain when not using the "-n" argument (e.g. GNU)
# so at first try to tail some file to see if tail fails if used with "-n"
# if so, don't use "-n"
use_new_tail_syntax="-n"
tail $use_new_tail_syntax +1 "$0" > /dev/null 2> /dev/null || use_new_tail_syntax=""

tail $use_new_tail_syntax +2110 "$0" | (cd "${installer_data_dir}" && tar xzf -) || error_exit 1 "Problem unpacking installer data"

log_echo "The unpacked installer data will be moved to: ${installdir}"

rm -rf ${installdir}
mv -f ${installer_data_dir} ${installdir}

#################
# Setup actions #
#################

# create config AFTER getting/generating GUID !!!
action_create_config()
{
  log_echo "Creating config file: ${config_file} ..."

  echo "ProgramInstallDir=${installdir}/" > ${config_file} # this will replace the whole config file
  echo "ProgramConfigDir=${program_config_dir}/" >> ${config_file}
  echo "ProgramDataDir=${program_data_dir}/" >> ${config_file}
  echo "ProgramLogsDir=${program_logs_dir}/" >> ${config_file}
  echo "ProgramLibsDir=${program_libs_dir}/" >> ${config_file}
  echo "LanguageID=00000409" >> ${config_file}
  echo "Locale=${arg_locale}" >> ${config_file}
  echo "ProductName=Agent" >> ${config_file}
  echo "ProductType=era" >> ${config_file}
  echo "ProductVersion=${arg_current_version}" >> ${config_file}
  echo "ProductInstanceID=${GUID}" >> ${config_file}
  chmod a+r ${config_file}

}




action_move_esetmodules()
{
  if [ -d "${modules_dir}" ];then
    rm -rf "${modules_dir}"
  fi

  log_echo "Creating 'modules' directory path: ${modules_dir}"
  mkdir -p ${modules_dir}

  log_echo "Moving ESET Modules from '${installdir}/setup/Modules' to ${modules_dir}... "

  mv ${installdir}/setup/Modules/* "${modules_dir}"

  OUT=$?
  if [ $OUT -ne 0 ]; then
	  echo "failed"
    error_exit $OUT "$LINENO: Error '$OUT' occurred while moving modules directory"
  fi
}





#################################
# Setup custom actions wrappers #
#################################

# Parses the CustomAction output in .ini file format. Keys are WIX "P_NAME"
# properties, values are strings. Function defines variables of the name derived
# from key like so: P_PROPERTY_NAME => arg_property_name. Variable contains the
# coresponding string value.
parse_ca_output()
{
  local line key val var_name

  while read line
  do
    echo "$line" | grep "^\[" && continue
    key="$(/bin/echo -E ${line} | sed 's/\=.*$//')"
    val="$(/bin/echo -E ${line} | sed 's/^[[:alnum:]_\ ]*\=//')"
    var_name=`echo ${key} | sed "s/P_/arg_/" | awk '{print tolower($0)}'`

    # We need to replace dollar signs so eval will not use them as special variables (e.g. $*)
    val=`echo $val | sed 's/[$]/\\\\$/g'`
    # same for double quote
    val=`echo $val | sed 's/["]/\\\\"/g'`

    eval "${var_name}=\"${val}\""
  done < "${1}"
}



invoke_custom_action()
{
    local pipe pid

    # older Redhat releases (5) are blocking our executable due to relocations
    # we will use workaround by explicitly setting SELinux context
    chcon -t textrel_shlib_t -R "${installdir}/" > /dev/null 2>&1 || true

    pipe=$(mktemp -u /tmp/$(basename $0).pipe.XXXXXXXXXX)
    mkfifo "$pipe"

    ${installdir}/setup/CustomActions -a "$1" --product-name "$product_name"\
        --installed "$installed"\
        --upgrade "$upgrade"\
        --product-guid "$GUID"\
        --create-ca "$arg_create_ca"\
        --ca-password "$arg_ca_password"\
        --db-scripts-dir "$db_scripts_dir"\
        --db-type "$db_type"\
        --db-path "$db_path"\
        --db-upgrade "$db_upgrade"\
        --modules-dir "$modules_dir"\
        --db-connectors-dir "$db_connectors_dir"\
        --cert-path "$arg_cert_path"\
        --cert-content "$arg_cert_content"\
        --cert-auth-path "$arg_cert_auth_path"\
        --cert-auth-content "$arg_cert_auth_content"\
        --connection-chosen "$arg_connection_chosen"\
        --hostname "$arg_hostname"\
        --hostname-to-check "$arg_hostname_to_check"\
        --port "$arg_port"\
        --port-to-check "$arg_port_to_check"\
        --cert-password "$arg_cert_password"\
        --cert-password-is-base64 "$arg_cert_password_is_base64"\
        --installed-version "$arg_installed_version"\
        --current-version "$arg_current_version"\
        --webconsole-user "$arg_webconsole_user"\
        --webconsole-password "$arg_webconsole_password"\
        --webconsole-hostname "$arg_webconsole_hostname"\
        --webconsole-port "$arg_webconsole_port"\
        --server-cert-temp-path "$server_cert_temp_path"\
        --cert-to-check-path "$(readlink -e "$arg_cert_path")"\
        --cert-to-check-password "$arg_cert_password"\
        --cert-temp-path "$cert_temp_path"\
        --cert-auth-temp-path "$cert_auth_temp_path"\
        --era-lib-dir "$installdir/"\
        --computer-group-choice "$arg_computer_group_choice"\
        --computer-added-uuid "$arg_computer_added_uuid"\
        --log-sequence-id "$arg_log_sequence_id"\
        --replication-interval "$arg_replication_interval"\
        --webconsole-use-domain "$arg_webconsole_use_domain"\
        --initial-static-group "$arg_initial_static_group"\
        --custom-policy "$arg_custom_policy"\
        --use-proxy "$arg_use_proxy"\
        --proxy-http-hostname "$arg_proxy_http_hostname"\
        --proxy-http-port "$arg_proxy_http_port"\
        --proxy-http-username "$arg_proxy_http_username"\
        --proxy-http-password "$arg_proxy_http_password"\
        --enable-telemetry "$arg_enable_telemetry"\
        --keep-stored-policies "$arg_keep_stored_policies"\
        --appdata-data-dir "$program_data_dir"\
        2>> "$installer_log" > "$pipe" &
    pid=$!

    parse_ca_output "$pipe"

    wait $pid
    return $?
}


action_dep_check_openssl()
{
  local exitcode

  echo -n "Checking OpenSSL ..."
  log "Checking OpenSSL ..."

  invoke_custom_action DepCheckOpenSSL
  exitcode=$?

  if [ $exitcode -ne 0 ];then
    echo " failure"
    log "Failed dependency check for OpenSSL."
    error_exit 1 "$LINENO: Error occurred while checking OpenSSL"
  else
    echo " done [${arg_openssl_version}]"
    log "Found: ${arg_openssl_version}"
  fi
}


custom_action_check_version()
{
  local exitcode

  echo "Checking installed version ..."
  log "Checking installed version ..."

  invoke_custom_action CheckVersion
  exitcode=$?

  version_status=$arg_version_status

  if [ $exitcode -ne 0 ];then
    echo "failed"
    error_exit $exitcode "$LINENO: Error '$exitcode' occurred while checking installed version"
  fi
}



custom_action_check_certificate()
{
  local exitcode

  echo -n "Checking peer certificate ... "
  log "Checking peer certificate."

  invoke_custom_action CheckCertificate
  exitcode=$?

  if [ $exitcode -ne 0 ];then
    echo "failed"
    error_exit $exitcode "$LINENO: Error '$exitcode' occurred while checking peer certificate"
  else
    if test "$arg_cert_to_check_status" != "OK"
    then
      echo "failed"
      error_exit 1 "$LINENO: Error checking peer certificate: $arg_cert_to_check_status"
    else
      echo "done"
    fi
  fi
}



custom_action_read_conf()
{
  local exitcode

  log_echo "Reading previous configuration settings"

  invoke_custom_action LoadInstalledData
  exitcode=$?

  if [ $exitcode -ne 0 ];then
    log_echo "Failed reading previous configuration settings"
  else
    log_echo "Previous configuration read ('hostname': '$arg_hostname', 'port': $arg_port)"
  fi
}



action_load_correct_guid()
{
  local exitcode

  log_echo "Loading correct GUID..."

  invoke_custom_action LoadCorrectProductGuid
  exitcode=$?

  GUID=$arg_product_guid

  if [ $exitcode -ne 0 ];then
    log_echo "Failed loading GUID."
    error_exit $exitcode "$LINENO: Error '$exitcode' occurred while loading GUID"
  else
    log_echo "Loading of GUID was successful (new GUID = ${GUID})"
  fi
}




custom_action_db_check_connection()
{
  local exitcode reason

  log_echo "Reading database status..."

  invoke_custom_action DbCheckConnection
  exitcode=$?

  # this should define variable ${arg_db_status} with one of the following
  # values:
  # DB_INVALID - database is corrupted or not ESET Management Agent database
  # DB_UPGRADEABLE - database could be upgraded
  # DB_NOTUPGRADEABLE - database could not be upgraded
  # DB_DOWNGRADE - database could be dowgraded (not supported)
  # DB_MISSING - database could no be found and/or is non-existent
  # DB_OTHERPRODUCT - database is for other ESET product

  # check the outcome of upgradeability check
  case ${arg_db_status} in
    "DB_INVALID")
      reason="Database is corrupted or not ESET Management Agent database."
      ;;
    "DB_UPGRADEABLE")
      reason="Database is upgradeable."
      ;;
    "DB_NOTUPGRADEABLE")
      reason="Databes is not upgradeable."
      ;;
    "DB_DOWNGRADE")
      reason="Database could be downgraded."
      ;;
    "DB_MISSING")
      reason="Database is missing."
      ;;
    "DB_OTHERPRODUCT")
      reason="Database is for other ESET product."
      ;;
    *)
      reason="Unknown database upgrade status."
      ;;
  esac

  db_status=$arg_db_status

  if [ $exitcode -ne 0 ];then
    log_echo "Failed reading database."
    error_exit $exitcode "$LINENO: Error '$exitcode' occurred while reading database"
  else
    log_echo "Database read successfully."
  fi
}




custom_action_check_server_connection()
{
  local exitcode

  log_echo "Checking $1 connection..."

  arg_hostname_to_check="$2"
  invoke_custom_action CheckServerConnection
  exitcode=$?

  if [ $exitcode -ne 0 ]; then
    log_echo "Failed checking $1 connection."
    error_exit $exitcode "$LINENO: Error '$exitcode' occurred while checking connection"
  else
    if [ $arg_connection_chosen = "badformat" ]; then
      log_echo "Invalid $1 connection."
      error_exit 1 "$LINENO: Error checking $1 connection: The provided hostname is invalid (empty or in wrong format)!"
    fi
  fi
	
  arg_port_to_check="$3"
  invoke_custom_action CheckPortFormat 
  exitcode=$?
	
  if [ $exitcode -ne 0 ]; then
    log_echo "Failed checking $1 port."
    error_exit $exitcode "$LINENO: Error '$exitcode' occurred while checking port"
  else
    if [ $arg_port_to_check_status -ne 0 ]; then
      log_echo "Invalid $1 port."
      error_exit 1 "$LINENO: Error checking $1 port: The provided port is invalid (empty or not in range (1-65535)!"
    else    
      log_echo "Connection checked successfully."
    fi
  fi
}




custom_action_config_set_server_connection()
{
  local exitcode

  log_echo "Setting connection into config..."

  invoke_custom_action ConfigSetServerConnection
  exitcode=$?

  if [ $exitcode -ne 0 ];then
    log_echo "Failed setting connection into config."
    error_exit $exitcode "$LINENO: Error '$exitcode' occurred while setting connection"
  else
    log_echo "Connection set successfully."
  fi
}




custom_action_config_set_proxy_connection()
{
  local exitcode

  log_echo "Setting proxy settings into config..."

  invoke_custom_action ConfigSetProxyConnection
  exitcode=$?

  if [ $exitcode -ne 0 ];then
    log_echo "Failed setting proxy settings into config."
    error_exit $exitcode "$LINENO: Error '$exitcode' occurred while setting proxy settings"
  else
    log_echo "Proxy settings set successfully."
  fi
}

custom_action_set_telemetry()
{
  local exitcode

  log_echo "Setting product improvement program settings settings into config..."

  invoke_custom_action SetTelemetry
  exitcode=$?

  if [ $exitcode -ne 0 ];then
    log_echo "Failed setting product improvement program settings settings into config."
    error_exit $exitcode "$LINENO: Error '$exitcode' occurred while setting product improvement program settings settings"
  else
    log_echo "Product improvement program settings settings set successfully."
  fi
}


custom_action_config_set_peer_certificate()
{
  local exitcode

  log_echo "Setting peer certificate into config..."

  if [ "x${arg_cert_path}" != "x" ]; then
    invoke_custom_action ConfigInsertPeerCertFile
  elif [ "x${arg_cert_content}" != "x" ]; then
    invoke_custom_action ConfigInsertPeerCertContent
  else
    error_exit 1 "Peer certificate was not provided."
  fi

  exitcode=$?

  if [ $exitcode -ne 0 ];then
    log_echo "Failed setting peer certificate into config."
    error_exit $exitcode "$LINENO: Error '$exitcode' occurred while setting peer certificate"
  else
    log_echo "Peer certificate set successfully."
  fi
}




custom_action_config_reset_replication()
{
  local exitcode

  log_echo "Resetting replication interval..."

  invoke_custom_action ConfigResetReplication
  exitcode=$?

  if [ $exitcode -ne 0 ];then
    log_echo "Failed resetting replication interval."
    error_exit $exitcode "$LINENO: Error '$exitcode' occurred while resetting replication interval"
  else
    log_echo "Replication interval reset was successful."
  fi
}




custom_action_apply_custom_policy()
{
  local exitcode

  log_echo "Applying custom policy settings..."

  invoke_custom_action ApplyCustomPolicy
  exitcode=$?

  if [ $exitcode -ne 0 ];then
    log_echo "Failed to apply custom policy settings."
    error_exit $exitcode "$LINENO: Error '$exitcode' occurred while apply custom policy settings"
  else
    log_echo "Applying custom policy settings was successful."
  fi
}




custom_action_db_insert_cert_auth()
{
  local exitcode

  log_echo "Inserting certificate authority into database..."

  if [ "x${arg_cert_auth_path}" != "x" ] || [ "x${arg_cert_auth_content}" != "x" ]; then
    if [ "x${arg_cert_auth_path}" != "x" ]; then
      invoke_custom_action DbInsertCertAuthFile
    else
      invoke_custom_action DbInsertCertAuthContent
    fi

    exitcode=$?

    if [ $exitcode -ne 0 ];then
      log_echo "Failed inserting certificate authority into database."
      error_exit $exitcode "$LINENO: Error '$exitcode' occurred while inserting certificate authority"
    else
      log_echo "Certificate authority inserted successfully."
    fi
  else
    log_echo "Certificate authority was not provided. (It is not required)"
  fi
}




custom_action_repair_static_objects()
{
    local exitcode

    log_echo "Repairing static objects."

    invoke_custom_action RepairStaticObjects
    exitcode=$?

    if [ $exitcode -ne 0 ];then
        log_echo "Failed repairing static objects."
        error_exit $exitcode "$LINENO: Error '$exitcode' occurred while repairing static objects"
    else
        log_echo "Static objects repaired successfully."
    fi
}



custom_action_db_upgrade()
{
  local exitcode

  log_echo "Upgrading database."

  invoke_custom_action DbUpgrade
  exitcode=$?

  if [ $exitcode -eq 0 ];then
    log_echo "Database upgraded."
  else
    log_echo "Failed upgrading database."
    error_exit $exitcode "$LINENO: Error occurred while upgrading database"
  fi
}



custom_action_db_create()
{
  local exitcode

  log_echo "Creating database."

  invoke_custom_action DbCreate
  exitcode=$?

  if [ $exitcode -eq 0 ];then
    log_echo "Database created."
  else
    log_echo "Failed creating database."
    error_exit $exitcode "$LINENO: Error occurred while creating database"
  fi
}



action_get_server_certificate()
{
  local exitcode

  log_echo "Getting certificate from server..."

  invoke_custom_action GetServerCertificate
  exitcode=$?

  if [ "x${arg_server_connection_status}" = "xNO_POSSIBLE_CA" ]; then
    if [ $arg_create_ca = 0 -a "x${arg_ca_password}" = "x" ]; then
      echo "No suitable Certification Authority found on the server. Do you want to create new Certification Authority? [y/N]: "
      read line leftover
      case ${line} in
        y* | Y*)
          arg_create_ca=1
          action_get_server_certificate
          ;;
        *)
          error_exit 1 "No suitable Certification Authority found on the server, check options --create-ca and --ca-password."
          ;;
      esac
    else
      error_exit 1 "No suitable Certification Authority found on the server, check options --create-ca and --ca-password."
    fi
  elif [ "x${arg_server_connection_status}" = "xCONNECTION_ERROR" ]; then
    error_exit 1 "It is not possible to connect to the ESET PROTECT Server."
  elif [ "x${arg_server_connection_status}" = "xAUTHORIZE_ERROR" ]; then
    error_exit 1 "It is not possible to authorize to ESET PROTECT Server with provided credentials."
  elif [ "x${arg_server_connection_status}" = "xAUTHORIZE_ERROR_2FA" ]; then
    error_exit 1 "It is not possible to authorize to ESET PROTECT Server with provided credentials as Two-Factor Authentication is not supported in server assisted installations. Please enter different credentials."
  elif [ "x${arg_server_connection_status}" = "xBAD_SERVER_CERT" ]; then
    error_exit 1 "Received bad server certificate."
  elif [ "x${arg_server_connection_status}" = "xBAD_PEER_CERT" ]; then
    error_exit 1 "Received bad peer certificate for agent."
  elif [ "x${arg_server_connection_status}" = "xBAD_CERT_AUTH" ]; then
    error_exit 1 "Certification authority of Server is not available. Please import it to your system manually."
  elif [ "x${arg_server_connection_status}" = "xGET_PEER_CERT_ERROR" ]; then
    error_exit 1 "Error occurred while receiving peer certificate (try to reconnect)."
  elif [ "x${arg_server_connection_status}" = "xGET_CERT_AUTH_ERROR" ]; then
    error_exit 1 "Error occurred while receiving certification authority (try to reconnect)."
  elif [ "x${arg_server_connection_status}" = "xCANNOT_WRITE_SERVER_CERT" ]; then
    error_exit 1 "Error occurred while trying to write server certificate to temp directory."
  elif [ "x${arg_server_connection_status}" = "xCANNOT_WRITE_PEER_CERT" ]; then
    error_exit 1 "Error occurred while trying to write peer certificate to temp directory."
  elif [ "x${arg_server_connection_status}" = "xCANNOT_WRITE_CERT_AUTH" ]; then
    error_exit 1 "Error occurred while trying to write certification authority to temp directory."
  elif [ "x${arg_server_connection_status}" = "xBAD_SERVER_CERT_NOT_VALID" ]; then
    error_exit 1 "Received server certificate is not valid. Please check whether server contains valid peer certificate for provided hostname."
  elif [ "x${arg_server_connection_status}" = "xTIME_DESYNCHRONIZED_ERROR" ]; then
    error_exit 1 "It is not possible to create an appropriate certificate for this client, because certificate's validity is based on the time of the server. Please synchronize time on this client with the server. Current UTC time on the server is: $arg_server_current_time"
  else
    if [ "x${arg_server_connection_status}" != "xOK" ]; then
      log_echo "Failed getting certificates from server."
      error_exit 2 "$LINENO: Error occurred while getting certificates from server"
    fi
  fi
}



action_add_computer_to_group()
{
  local exitcode

  log_echo "Adding computer to group..."

  # clear the value only to ensure that we will detect if guid was set by action or not
  arg_product_guid=""

  invoke_custom_action AddComputerToGroup
  exitcode=$?

  if [ "x${arg_server_add_to_group_status}" != "xOK" ];then
    log_echo "Failed adding computer to group."
    error_exit 2 "$LINENO: Error occurred while adding computer to group"
  fi
  
  if [ "x${arg_product_guid}" != "x" -a "x${GUID}" != "x${arg_product_guid}" ];then
    GUID="${arg_product_guid}"
    log_echo "GUID updated to value: ${GUID}"
  fi
}


action_stop_service()
{
  # check if we are on Debian distribution (use update-rc.d) or not (use chkconfig)
  if command -v systemctl > /dev/null 2>&1; then
    if systemctl is-active $systemd_service > /dev/null 2>&1 ; then
      log_echo "Stopping running instance of $systemd_service"
      systemctl stop $systemd_service
    fi
  fi

  if command -v initctl > /dev/null 2>&1 && [ -d /etc/init/ ]; then
    if initctl status $service_name 2> /dev/null | grep running > /dev/null 2>&1; then
      log_echo "Stopping running instance of $service_name"
      initctl stop $service_name
    fi
  fi

  if test -f /etc/init.d/$service_name; then
      log_echo "Stopping running instance of $service_name"
      /etc/init.d/$service_name stop
  fi
}


action_install_selinux_policy()
{
  local exitcode

  local policyversion=0;
  if   [ -e /selinux/policyvers ]; then
    policyversion=`cat /selinux/policyvers`
  elif [ -e /sys/fs/selinux/policyvers ]; then
    policyversion=`cat /sys/fs/selinux/policyvers`
  fi

  if [ -e /etc/selinux/config ]; then
    if [ -z "`cat /etc/selinux/config | grep ^SELINUX=disabled`" ]; then
      if [ -n "`cat /etc/selinux/config | grep ^SELINUXTYPE=targeted`" ]; then
        if [ $policyversion -ge 21 ]; then
          echo -n "Installing SELinux policy..."
          log "Installing SELinux policy."

          "${installdir}/setup/selinux/eraagent.sh" >> "$installer_log" 2>&1
          exitcode=$?

          if [ $exitcode -eq 0 ];then
            echo " done"
            log "Installed SELinux policy."
          else
            echo " failure"

            if [ -n "`command -v make`" -a -e /usr/share/selinux/devel/Makefile ]; then
              error_exit $exitcode "Failed to install SELinux policy."
            else
              error_exit $exitcode "Failed to install SELinux policy due to missing dependencies (policycoreutils-devel)."
            fi
          fi
        else
          echo "Skipping SELinux policy installation (unsupported version)."
          log "Skipping SELinux policy installation (unsupported version)."
        fi
      else
        echo "Skipping SELinux policy installation (unsupported type)."
        log "Skipping SELinux policy installation (unsupported type)."
      fi
    else
      echo "Skipping SELinux policy installation (disabled)."
      log "Skipping SELinux policy installation (disabled)."
    fi
  else
    echo "Skipping SELinux policy installation."
    log "Skipping SELinux policy installation."
  fi
}

action_reset_logical_clocks()
{
  local exitcode

  log_echo "Resetting logical clocks..."

  invoke_custom_action ResetLogicalClocks
  exitcode=$?

  if [ $exitcode -ne 0 ];then
    log_echo "Failed resetting logical clocks."
    error_exit $exitcode "$LINENO: Error '$exitcode' occurred resetting logical clocks"
  else
    log_echo "Resetting logical clocks was successful."
  fi
}


action_config_reset_all()
{
  local exitcode

  log_echo "Resetting configuration..."

  invoke_custom_action ConfigResetAll
  exitcode=$?

  if [ $exitcode -ne 0 ];then
    log_echo "Failed resetting configuration."
    error_exit $exitcode "$LINENO: Error '$exitcode' occurred resetting configuration"
  else
    log_echo "Resetting configuration was successful."
  fi
}


action_reset_log_filter()
{
  local exitcode

  log_echo "Reset of log filter..."

  invoke_custom_action ResetLogFilter
  exitcode=$?

  if [ $exitcode -ne 0 ];then
    log_echo "Failed reset of log filter."
    error_exit $exitcode "$LINENO: Error '$exitcode' occurred while reset of log filter"
  else
    log_echo "Reset of log filter was successful."
  fi
}



action_set_static_group()
{
  local exitcode

  log_echo "Setting initial static group..."

  invoke_custom_action SetStaticGroup
  exitcode=$?

  if [ $exitcode -ne 0 ];then
    log_echo "Failed setting of initial static group."
    error_exit $exitcode "$LINENO: Error '$exitcode' occurred while setting initial static group"
  else
    log_echo "Setting of initial static group was successful."
  fi
}



action_copy_files()
{
  # Copy installer to the destination
  log_echo "Copying installer to target destination: ${installdir}/setup/installer_backup.sh"
  /bin/cp -rfL "${0}" "${installdir}/setup/installer_backup.sh"
}



action_permissions()
{
  if [ "x${service_user}" != "x" ]; then
    chown -R ${service_user}:${service_group} ${installdir};
    chown -R ${service_user}:${service_group} ${program_config_dir};
    chown -R ${service_user}:${service_group} ${program_data_dir};
    chown -R ${service_user}:${service_group} ${program_logs_dir};
  fi

  log_echo "File ownership set to: ${service_user}:${service_group}"
  
  # protect database and configuration
  # from normal users
  chmod -R o-rwx ${program_data_dir}
  chmod -R o-rwx ${program_config_dir}
  # explicitly set permissions for other directories created during installation
  chmod 0755 ${installdir}
  chmod 0755 ${program_logs_dir}
  chmod 0755 ${program_libs_dir}
}



action_webconsole_repair()
{
  if [ -f /root/appliance-configured-successfully ]; then
    log_echo "Detected virtual appliance - Webconsole repair attempt will be performed"

    systemctl stop tomcat
    sleep 5
    rm -rf /var/lib/tomcat/webapps/era
    mkdir /var/lib/tomcat/webapps/era
    (cd /var/lib/tomcat/webapps/era && unzip -q ../era.war)
    chown -R tomcat:tomcat /var/lib/tomcat/webapps/era
    systemctl start tomcat

    log_echo "Webconsole repair finished"
  fi
}


####################
# INSTALL SEQUENCE #
####################

action_dep_check_openssl

# Set path to database scripts, because installdir could have been changed through command-line
db_scripts_dir=${installdir}/setup/Database
db_connectors_dir=${installdir}/setup


# Load values from config file
if [ -f ${config_file} ]; then
  test -n "$GUID" && echo "Ignoring specified guid '$GUID'. Using one from config file."
  GUID=`sed '/ProductInstanceID/!d' ${config_file} | sed "s/^ProductInstanceID=//"`
  log_echo "GUID loaded from config-file with value: ${GUID}"
  
  arg_installed_version=`sed '/ProductVersion/!d' ${config_file} | sed "s/^ProductVersion=//"`
  log_echo "Installed version loaded from config-file is: ${arg_installed_version}"
fi

# possible versions: NEW, UPGRADE, REPAIR, DOWNGRADE
custom_action_check_version



if [ "x${version_status}" = "xDOWNGRADE" ]; then
  error_exit 1 "Newer version is already installed. Downgrade is not possible."
else 
    if [ "x${version_status}" = "xREPAIR" ]; then
        installed="${version_status}"    
    elif [ "x${version_status}" = "xUPGRADE" ]; then
        upgrade="${version_status}"
    fi
  
  log_echo "Status of current installation is: ${version_status}"
fi

is_updating=false

# load installed data when we are not installing new product
if test "x${version_status}" != "xNEW"
then 
    custom_action_read_conf

    if test -n "$arg_hostname" -o -n "$arg_port"
    then
        is_updating=:
    fi
fi

if [ "x${version_status}" != "xREPAIR" -a "x${version_status}" != "xUPGRADE" ]; then
    arg_keep_stored_policies="0"
fi

if test -n "$arg_user_hostname" -o -n "$arg_user_port"
then
    test -n "$arg_user_hostname" && arg_hostname="$arg_user_hostname"
    test -n "$arg_user_port" && arg_port="$arg_user_port"

    log_echo "New connection settings are 'hostname': '$arg_hostname', 'port': $arg_port"
else
    log_echo "Using previous connection settings 'hostname': '$arg_hostname', 'port': $arg_port"
fi

if test -z "$arg_hostname"
then
     error_exit 1 "No hostname was inputted or resolved. Please provide valid hostname using --hostname parameter."
fi

custom_action_check_server_connection "server" "$arg_hostname" "$arg_port"
if [ "x${arg_use_proxy}" = "x1" ]; then
  custom_action_check_server_connection "proxy" "$arg_proxy_http_hostname" "$arg_proxy_http_port"
fi

# stop service if it exists
action_stop_service


if test \( "x${version_status}" = "xNEW" -o "x${version_status}" = "xREPAIR" \) -a -n "$arg_webconsole_user" -a -n "$arg_webconsole_password" -a -n "$arg_webconsole_port"
then  
  if test -z "$arg_webconsole_hostname"
  then
    arg_webconsole_hostname="$arg_hostname"
  fi
  
  server_cert_temp_path="${installdir}/setup/servercert.der"
  cert_temp_path="${installdir}/setup/peercert.pfx"
  cert_auth_temp_path="${installdir}/setup/ca.der"

  action_get_server_certificate
  
  if test -z "$arg_cert_subject" -o -z "$arg_cert_issuer" -o -z "$arg_cert_hash"
  then
      # clear directories
    error_exit 1 "Server certificate was not received. Please check connection parameters and try again..."
  fi
  
  echo
  echo "Received Server certificate details:"
  echo "Subject: $arg_cert_subject"
  echo "Issuer: $arg_cert_issuer"
  echo "Fingerprint: $arg_cert_hash"
  echo
  
  if [ "x${arg_export_fingerprint}x" != "xx" ]; then
      # Exports the fingerprint to file. Used in appliance so it can be displayed later.
      log "Exporting fingerprint to ${arg_export_fingerprint}"
      echo "$arg_cert_hash" > "${arg_export_fingerprint}"
  fi
  
  if [ "x${cert_auto_confirm}x" = "xTRUEx" ]; then
      # Automatically accept server certificate.
      line="y"
  else
      echo "Do you accept server certificate? [y/N]: "
      read line leftover
  fi
  
  case ${line} in
    y* | Y*)
      # setting certificates for configuration
      arg_cert_path="$cert_temp_path"
      arg_cert_auth_path="$cert_auth_temp_path"
      
      # add computer to static group
      action_add_computer_to_group
            
      server_certificate_accepted=TRUE;;
    *)
      log_echo "Certificate not accepted. Exiting ..."

      # clean directories
      if [ "x${version_status}" = "xNEW" ]; then
        uninstall_without_exit
      fi
      
      exit 1;;
  esac
  is_providing_cert=:
  is_providing_cert_auth=:
fi


################################################
# This method will load correct GUID based on this priority list:
# 1. GUID written in the database (because of reinstall with existing database)
# 2. GUID in config file/passed as parameter
# 3. New generated GUID

action_load_correct_guid

################################################




if test -n "$arg_user_cert_path" -o -n "$arg_user_cert_content" -o -n "$arg_user_cert_password"
then
    arg_cert_path="${arg_user_cert_path}"
    arg_cert_content="${arg_user_cert_content}"
    arg_cert_password="${arg_user_cert_password}"

    is_providing_cert=:
fi


if test -n "$arg_user_cert_auth_path" -o -n "$arg_user_cert_auth_content"
then
    arg_cert_auth_path="${arg_user_cert_auth_path}"
    arg_cert_auth_content="${arg_user_cert_auth_content}"

    is_providing_cert_auth=:
fi

if $is_updating
then
    if $is_providing_cert
    then
        custom_action_check_certificate
    fi
else
    custom_action_check_certificate
fi

action_create_config

action_move_esetmodules

custom_action_db_check_connection

log_echo "Database status is '${db_status}'"

if [  "x${db_status}" = "xDB_MISSING" ]; then
  log_echo "Database status is 'DB_MISSING'. Database does not exists - it will be created"
  db_upgrade=0
elif [  "x${db_status}" = "xDB_UPGRADEABLE" ]; then
  log_echo "Database status is 'DB_UPGRADEABLE'. Database exists and will be upgraded"
  db_upgrade=1
elif [  "x${db_status}" = "xDB_NOTUPGRADEABLE" ]; then
  error_exit 5 "Database status is 'DB_NOTUPGRADEABLE'. Database cannot be upgraded, because upgrade scripts are missing."
elif [  "x${db_status}" = "xDB_DOWNGRADE" ]; then
  error_exit 5 "Database status is 'DB_DOWNGRADE'. Database cannot be upgraded, because newer version is already installed."
elif [  "x${db_status}" = "xDB_INVALID" ]; then
  error_exit 5 "Database status is 'DB_INVALID'. Database cannot be upgraded, because it is corrupted or it is not ESET Management Agent database."
elif [  "x${db_status}" = "DB_OTHERPRODUCT" ]; then
  error_exit 5 "Database status is 'DB_OTHERPRODUCT'. Database cannot be upgraded, because it is database for other ESET product."
fi

if $is_updating
then
    if $is_providing_cert_auth
    then
        custom_action_db_insert_cert_auth
    fi
else
    custom_action_db_insert_cert_auth
fi

if [  "x${db_status}" = "xDB_MISSING" ]; then
  custom_action_db_create
else
  custom_action_db_upgrade
fi

# !!! This has to be the first config engine custom action, because it resets configuration during repair or upgrade !!!
if test "x${version_status}" = "xREPAIR" -o "x${version_status}" = "xUPGRADE"
then
  action_config_reset_all
fi

# inserting into config must happen after database is created
custom_action_config_set_server_connection

if [ "x${arg_use_proxy}" = "x1" ]; then
  custom_action_config_set_proxy_connection
fi

if [ "x${arg_enable_telemetry}" != "x" ]
then
  custom_action_set_telemetry
fi

custom_action_config_reset_replication

if test -n "$arg_custom_policy"
then
  custom_action_apply_custom_policy
fi

if test -n "$arg_initial_static_group"
then
  action_set_static_group
fi

if [ "x${version_status}" = "xREPAIR" -o \( "x${version_status}" = "xUPGRADE" -a "x${arg_keep_stored_policies}" != "x1" \) ]; then
  custom_action_repair_static_objects
fi

if $is_updating
then
    if $is_providing_cert
    then
        custom_action_config_set_peer_certificate
    fi
else
    custom_action_config_set_peer_certificate
fi

if test "x${version_status}" = "xNEW" -a -n "$arg_log_sequence_id"
then
  action_reset_logical_clocks
fi

if test "x${version_status}" = "xUPGRADE"
then
  action_reset_log_filter
fi

action_copy_files

action_permissions

action_webconsole_repair

##########################
# SET AUTO-START SERVICE #
##########################

log_echo "Setting auto-start service..."
cd "${installdir}"

set -e

# unregister and remove all service files before proceeding: unregistering regardles
# of system-preferred service manager to be sure there are no remmants after migration
if command -v systemctl > /dev/null 2>&1; then
  if systemctl is-enabled $systemd_service > /dev/null 2>&1 ; then
    systemctl disable $systemd_service
  fi
  if test -f /etc/systemd/system/$systemd_service; then
    rm /etc/systemd/system/$systemd_service
  fi
fi
if command -v initctl > /dev/null 2>&1 && [ -d /etc/init/ ]; then
  if test -f "/etc/init/$upstart_service"; then
    rm "/etc/init/$upstart_service"
  fi
fi
if test -f /etc/init.d/$service_name; then
    if command -v update-rc.d > /dev/null 2>&1; then
        update-rc.d -f $service_name remove
    elif command -v chkconfig > /dev/null 2>&1; then
        chkconfig $service_name off
        chkconfig --del $service_name
    fi
    rm /etc/init.d/$service_name
fi


if command -v systemctl > /dev/null 2>&1; then
    mv ./setup/systemd.service /etc/systemd/system/$systemd_service
    systemctl daemon-reload
    systemctl enable $systemd_service
    set +e; action_install_selinux_policy; set -e
    systemctl start $systemd_service
elif command -v initctl > /dev/null 2>&1 && [ -d /etc/init/ ]; then
    mv -f ./setup/$upstart_service /etc/init/
    initctl reload-configuration || true
    set +e; action_install_selinux_policy; set -e
    initctl start $service_name
elif command -v update-rc.d > /dev/null 2>&1; then
    mv -f ./setup/$service_name /etc/init.d/
    update-rc.d $service_name defaults
    set +e; action_install_selinux_policy; set -e
    /etc/init.d/$service_name start
elif command -v chkconfig > /dev/null 2>&1; then
    mv -f ./setup/$service_name /etc/init.d/
    chkconfig --add $service_name
    chkconfig $service_name on
    set +e; action_install_selinux_policy; set -e
    /etc/init.d/$service_name start
elif test -x /sbin/chkconfig; then
    mv -f ./setup/$service_name /etc/init.d/
    /sbin/chkconfig --add $service_name
    /sbin/chkconfig $service_name on
    set +e; action_install_selinux_policy; set -e
    /etc/init.d/$service_name start
else
    error_exit 1 "Unable to start service."
fi

log_echo "Service started."



log_echo "Product installed."

###########################
# END OF INSTALL SEQUENCE #
###########################

exit 0

########################
# Start of TAR.GZ file #
########################
